local json = json


function AndroidCallStaticMethod(className, methodName, methodSignature, luaArgs)
    local rt = string.sub(methodSignature, -1, -1)
    local method
    if rt == "V" then
        method = CS.Utils.CallStaticVoidMethod
    elseif rt == "A" then
        method = CS.Utils.CallStaticStringMethod
    elseif rt == "Z" then
        method = CS.Utils.CallStaticBooleanMethod
    elseif rt == "B" then
        method = CS.Utils.CallStaticByteMethod
    elseif rt == "C" then
        method = CS.Utils.CallStaticCharMethod
    elseif rt == "S" then
        method = CS.Utils.CallStaticShortMethod
    elseif rt == "I" then
        method = CS.Utils.CallStaticIntMethod
    elseif rt == "J" then
        method = CS.Utils.CallStaticLongMethod
    elseif rt == "F" then
        method = CS.Utils.CallStaticFloatMethod
    elseif rt == "D" then
        method = CS.Utils.CallStaticDoubleMethod
    else
        error("error return type: "..tostring(rt))
    end

    return method(className, methodName, methodSignature, luaArgs)
end


function iOSCallStaticMethod(className, methodName, ...)
    local args = {...}
    local jsonArgs = json.encode(args)
    local rstr = CS.OcUtils.CallStaticMethod(className, methodName, jsonArgs)
    local rt = json.decode(rstr)
    local err = rt[1]
    local rval = rt[2]

    if err == 0 then
        -- no err
    elseif err == -1 then
        error("JSO_ERR_TYPE_NOT_SUPPORT")
    elseif err == -2 then
        error("JSO_ERR_INVALID_ARGUMENTS")
    elseif err == -3 then
        error("JSO_ERR_METHOD_NOT_FOUND")
    elseif err == -4 then
        error("JSO_ERR_EXCEPTION_OCCURRED")
    elseif err == -5 then
        error("JSO_ERR_CLASS_NOT_FOUND")
    elseif err == -6 then
        error("JSO_ERR_VM_FAILURE")
    else
        error("unkown error")
    end

    return rval
end